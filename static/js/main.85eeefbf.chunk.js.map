{"version":3,"sources":["redux/reducers/root.ts","redux/reducers/last-action.ts","redux/store.ts","components/action-observer.tsx","utils/empty-func.ts","components/rerender.tsx","components/modal.tsx","components/importer.tsx","hooks/useActionListener.ts","redux/selectors/last-action.ts","redux/actions/dummy.ts","components/last-action/index.tsx","components/last-action/last-action.tsx","hooks/useInterval.ts","components/timed-counter.tsx","components/toggle-modal.tsx","redux/provider.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["rootReducer","combineReducers","lastAction","action","payload","actionObservable","ActionObservable","middlewares","createMiddleware","logger","store","createStore","applyMiddleware","ActionObserver","useState","type","setAction","useEffect","subscribe","newAction","JSON","stringify","emptyFunc","Child","inc","onClick","MemoChild","React","memo","Rerender","count","setCount","useCallback","ModalBackDrop","styled","div","ModalBase","Modal","open","onCancel","children","document","createElement","el","body","appendChild","removeChild","createPortal","console","log","e","stopPropagation","Importer","useActionListener","callback","actionTypes","useStore","unsubscribe","getState","includes","DUMMY_START","LastAction","values","useMemo","dispatch","useDispatch","Date","now","useInterval","func","duration","ref","useRef","running","setRunning","current","setInterval","clearInterval","start","stop","Actions","reset","Fragment","TimedCounter","isRunning","ToggleModal","setOpen","ReduxProvider","AppContainer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.85eeefbf.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\nimport { lastActionReducer } from './last-action';\n\nexport const rootReducer = combineReducers({\n  lastAction: lastActionReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n","import { Action } from 'redux/actions';\n\nexport const NULL_ACTION = 'NULL_ACTION';\n\nconst INITIAL_STATE = {\n  type: NULL_ACTION,\n  payload: null,\n};\n\nexport const lastActionReducer = (state = INITIAL_STATE, action: Action) => {\n  if (!action.payload) {\n    return {\n      payload: null,\n      ...action,\n    };\n  }\n  return action;\n};\n\nexport type LastActionState = ReturnType<typeof lastActionReducer>;\n","import { ActionObservable } from 'react-redux-action-observer';\nimport { applyMiddleware, createStore, Middleware } from 'redux';\nimport logger from 'redux-logger';\nimport { rootReducer } from './reducers/root';\n\nexport const actionObservable = new ActionObservable();\n\nconst middlewares: Middleware[] = [actionObservable.createMiddleware(), logger];\n\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\n","import React, { useEffect, useState } from 'react';\nimport { Action } from 'react-redux-action-observer';\nimport { actionObservable } from '../redux/store';\n\nconst ActionObserver = () => {\n  const [action, setAction] = useState<Action>({ type: 'INIT' });\n\n  useEffect(() => {\n    const unsubscribe = actionObservable.subscribe((newAction) => {\n      setAction(newAction);\n    });\n    return unsubscribe;\n  });\n\n  return (\n    <div>\n      <h2>Action Observer</h2>\n      <pre>{JSON.stringify(action, null, 2)}</pre>\n    </div>\n  );\n};\n\nexport default ActionObserver;\n","const emptyFunc = (): void => {\n  // do nothing\n}\n\nexport default emptyFunc;","import React, { useCallback, useState } from 'react';\nimport emptyFunc from 'utils/empty-func';\n\ninterface ChildProps {\n  inc: () => void;\n}\n\nconst Child: React.FC<ChildProps> = ({ inc = emptyFunc }) => {\n  return <button onClick={inc}>Inc</button>;\n};\n\nconst MemoChild = React.memo(Child);\n\nconst Rerender: React.FC = () => {\n  const [count, setCount] = useState(0);\n\n  const inc = useCallback(() => {\n    setCount((count) => count + 1);\n  }, []);\n\n  return (\n    <div>\n      <h2>{'Rerender'}</h2>\n      <p>{count}</p>\n      <Child inc={inc} />\n      <MemoChild inc={inc} />\n    </div>\n  );\n};\n\nexport default Rerender;\n","import React, { useState, useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport styled from 'styled-components';\n\nconst ModalBackDrop = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: 1000;\n  height: 100vh;\n  width: 100vw;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.2);\n`;\n\nconst ModalBase = styled.div`\n  z-index: 1001;\n  padding: 1rem;\n  border-radius: 3px;\n  box-shadow: 0 3px 0.5rem rgba(0, 0, 0, 0.1);\n  background-color: white;\n`;\n\ninterface ModalProps {\n  open: boolean;\n  onCancel?: () => void;\n}\n\nconst Modal: React.FC<ModalProps> = ({ open, onCancel, children }) => {\n  const [el] = useState(document.createElement('div'));\n\n  useEffect(() => {\n    document.body.appendChild(el);\n    return () => {\n      document.body.removeChild(el);\n    };\n  }, [el]);\n\n  if (!open) {\n    return null;\n  }\n\n  return createPortal(\n    <ModalBackDrop\n      onClick={() => {\n        console.log('back');\n        onCancel && onCancel();\n      }}\n    >\n      <ModalBase\n        onClick={(e) => {\n          e.stopPropagation();\n        }}\n      >\n        {children}\n      </ModalBase>\n    </ModalBackDrop>,\n    el\n  );\n};\n\nexport default Modal;\n","import Rerender from 'components/rerender';\nimport React from 'react';\nimport Modal from './modal';\n\nconst Importer: React.FC = () => {\n  const handleClick = () => {\n    console.log(\n      `imported ${Modal} using a relative import \n      and ${Rerender} using an absolute import`\n    );\n  };\n  return (\n    <div>\n      <h2>Importer</h2>\n      <button onClick={handleClick}>Log</button>\n    </div>\n  );\n};\n\nexport default Importer;\n","import { useEffect } from 'react';\nimport { useStore } from 'react-redux';\nimport { selectLastAction } from 'redux/selectors/last-action';\n\nconst useActionListener = (\n  callback: (values: any) => void,\n  actionTypes: string[]\n): void => {\n  const store = useStore();\n\n  useEffect(() => {\n    const unsubscribe = store.subscribe(() => {\n      const lastAction = selectLastAction(store.getState());\n      if (actionTypes.includes(lastAction.type)) {\n        callback(lastAction.payload);\n      }\n    });\n    return () => {\n      unsubscribe();\n    };\n  }, [store, callback, actionTypes]);\n};\n\nexport default useActionListener;\n","import { LastActionState } from 'redux/reducers/last-action';\nimport { RootState } from 'redux/reducers/root';\nimport 'reselect';\n\nexport const selectLastAction = (state: RootState): LastActionState =>\n  state.lastAction;\n","export const DUMMY_START = 'DUMMY_START';\nexport const DUMMY_SUCCESS = 'DUMMY_SUCCESS';\nexport const DUMMY_FAILURE = 'DUMMY_FAILURE';\n\nexport const dummyStart = () => ({\n  type: DUMMY_START,\n  payload: Date.now(),\n});\n\nexport const dummySuccess = () => ({\n  type: DUMMY_SUCCESS,\n});\n\nexport const dummyFailure = () => ({\n  type: DUMMY_FAILURE,\n});\n","import LastAction from './last-action';\n\nexport default LastAction;\n","import useActionListener from 'hooks/useActionListener';\nimport React, { useCallback, useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { dummyStart, dummySuccess, DUMMY_START } from 'redux/actions/dummy';\n\nconst LastAction: React.FC = () => {\n  const log = useCallback((values: any) => {\n    console.log('i said:', values);\n  }, []);\n  const actionTypes = useMemo(() => [DUMMY_START], []);\n  useActionListener(log, actionTypes);\n\n  const dispatch = useDispatch();\n  const startDummy = () => {\n    dispatch(dummyStart());\n  };\n  const successDummy = () => {\n    dispatch(dummySuccess());\n  };\n\n  return (\n    <div>\n      <h2>Last Action</h2>\n      <button onClick={startDummy}>Start</button>\n      <button onClick={successDummy}>Success</button>\n    </div>\n  );\n};\n\nexport default LastAction;\n","import { useCallback, useEffect, useRef, useState } from 'react';\n\nconst useInterval = (\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  func: () => void,\n  duration: number\n): [boolean, () => void, () => void] => {\n  const ref = useRef<number>();\n  const [running, setRunning] = useState(false);\n\n  useEffect(() => {\n    if (running) {\n      ref.current = setInterval(func, duration);\n    }\n    return () => {\n      if (running) {\n        clearInterval(ref.current);\n      }\n    };\n  }, [func, duration, running]);\n\n  const start = useCallback(() => {\n    setRunning(true);\n  }, []);\n\n  const stop = useCallback(() => {\n    setRunning(false);\n  }, []);\n\n  return [running, start, stop];\n};\n\nexport default useInterval;\n","import React, { useEffect, useState, useCallback } from 'react';\nimport useInterval from '../hooks/useInterval';\nimport emptyFunc from 'utils/empty-func';\n\ninterface ActionsProps {\n  start: () => void;\n  stop: () => void;\n  reset: () => void;\n}\n\nconst Actions: React.FC<ActionsProps> = ({\n  start = emptyFunc,\n  stop = emptyFunc,\n  reset = emptyFunc,\n}) => {\n  console.log('actions rerender');\n  return (\n    <React.Fragment>\n      <button onClick={start}>Start</button>\n      <button onClick={stop}>Stop</button>\n      <button onClick={reset}>Reset</button>\n    </React.Fragment>\n  );\n};\n\nconst TimedCounter: React.FC = () => {\n  const [count, setCount] = useState(0);\n\n  const inc = useCallback(() => {\n    setCount((count) => count + 1);\n  }, []);\n\n  const [isRunning, start, stop] = useInterval(inc, 500);\n\n  useEffect(() => {\n    if (count >= 10) {\n      stop();\n    }\n  }, [count, stop, isRunning]);\n\n  const reset = useCallback(() => {\n    setCount(0);\n  }, []);\n\n  useEffect(() => {\n    console.log('start, stop, or reset updated');\n  }, [start, stop, reset]);\n\n  return (\n    <div>\n      <h2>Interval</h2>\n      <p>{count}</p>\n      <div>\n        <p>{`status: ${isRunning ? 'running' : 'stopped'}`}</p>\n        <Actions key=\"actions\" start={start} stop={stop} reset={reset} />\n      </div>\n    </div>\n  );\n};\n\nexport default TimedCounter;\n","import React, { useState } from 'react';\nimport Modal from './modal';\n\nconst ToggleModal: React.FC = () => {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <React.Fragment>\n      <div>\n        <h2>Modal</h2>\n        <button onClick={() => setOpen(!open)}>\n          {open ? 'close' : 'open'}\n        </button>\n      </div>\n      <Modal open={open} onCancel={() => setOpen(false)}>\n        <div>hello</div>\n        <button onClick={() => setOpen(false)}>close</button>\n      </Modal>\n    </React.Fragment>\n  );\n};\n\nexport default ToggleModal;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\n\nconst ReduxProvider: React.FC = ({ children }) => {\n  return <Provider store={store}>{children}</Provider>;\n};\n\nexport default ReduxProvider;\n","import React from 'react';\nimport styled from 'styled-components';\nimport ActionObserver from './components/action-observer';\nimport Importer from './components/importer';\nimport LastAction from './components/last-action';\nimport Rerender from './components/rerender';\nimport TimedCounter from './components/timed-counter';\nimport ToggleModal from './components/toggle-modal';\nimport ReduxProvider from './redux/provider';\n\nconst AppContainer = styled.div`\n  max-width: 36rem;\n  margin: 0 auto;\n  padding: 1rem;\n`;\n\nconst App: React.FC = () => {\n  return (\n    <ReduxProvider>\n      <AppContainer>\n        <ToggleModal />\n        <TimedCounter />\n        <Rerender />\n        <Importer />\n        <LastAction />\n        <ActionObserver />\n      </AppContainer>\n    </ReduxProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) : void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}